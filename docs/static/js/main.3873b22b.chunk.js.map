{"version":3,"sources":["Components/AddCategory.jsx","Helpers/getGifs.js","Components/GifGridItem.jsx","Components/GifGrid.jsx","Hooks/useFetchGifs.jsx","Components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCiBDO,EAnBQ,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAC1B,ECH4B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAd,GACFe,QAAQC,IAAIhB,GACZY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGlB,CAACpB,IASGqB,EDrBsBM,CAAa3B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGlB,OAFFK,QAAQC,IAAIN,GAGR,qCACA,mCAAMpB,EAAN,OACA,qBAAKgB,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,aACPA,IAAKA,GAEDA,GADCA,EAAIC,aEYFiB,EAvBM,WAGjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAGA,OACI,qCACI,oBAAI+B,UAAU,mCAAd,sBACA,cAAC,EAAD,CAAa/B,cAAeA,IAC5B,uBAEA,6BAEI4C,EAAWpB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCb7D8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3873b22b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=u4VEADgnQfo4Htna8bBEniGfoN1it4ad`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return(gifs);\r\n  };","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInLeft'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from \"react\";\r\nimport {useFetchGifs} from \"../Hooks/useFetchGifs.jsx\"\r\nimport {GifGridItem} from \"./GifGridItem\"\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\nconst {data:images, loading} = useFetchGifs(category);\r\nconsole.log(loading);\r\n\r\n  return (\r\n    <>\r\n    <h3> {category} </h3>\r\n    <div className=\"card-grid\">\r\n      {images.map((img) => {\r\n        return <GifGridItem \r\n        img={img}\r\n        key={img.id}\r\n        {...img} />;\r\n      })}\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../Helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n      getGifs(category)\r\n      .then(img => {\r\n          console.log(img)\r\n          setState({\r\n              data: img,\r\n              loading: false\r\n          })\r\n      })\r\n  }, [category]);\r\n\r\n//   setTimeout(() => {\r\n//     setState({\r\n//       data: [1, 2, 3, 4, 5],\r\n//       loading: false,\r\n//     });\r\n//   }, 3000);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1 className='animate__animated animate__hinge'>Gifs App</h1>\r\n            <AddCategory setCategories={setCategories}/>            \r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                categories.map(category => {\r\n                    return <GifGrid category={category} key={category}/>\r\n                })}\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}